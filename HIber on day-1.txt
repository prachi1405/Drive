JPA
*************
Java Persistence API (JPA) is a Java specification that provides certain functionality and standard to ORM tools. 
The javax.persistence package contains the JPA classes and interfaces.

ORM Tool
*************
An ORM tool simplifies the data creation, data manipulation and data access. 
It is a programming technique that maps the object to the data stored in the database.
The ORM tool internally uses the JDBC API to interact with the database.
Like: Hibernate , TopLink etc.

Hibernate
*************
Hibernate is a Java framework that simplifies the development of Java application to interact with the database. 
It is an open source, lightweight, ORM (Object Relational Mapping) tool. 
Hibernate implements the specifications of JPA (Java Persistence API) for data persistence.


Advantages of Hibernate Framework
*************
Following are the advantages of hibernate framework:

1) Open Source and Lightweight
2) Fast Performance
3) Database Independent Query


Hibernate Architecture
************************************
The Hibernate architecture includes many objects such as persistent object, session factory, session, transaction factory, transaction, connection factory  etc.

The Hibernate architecture is categorized in four layers.
Java application layer
Hibernate framework layer
Backhand api layer
Database layer

Hibernate framework uses many objects such as session factory, session, transaction etc. along with existing Java API such as JDBC (Java Database Connectivity), JTA (Java Transaction API) and JNDI (Java Naming Directory Interface).


Elements of Hibernate Architecture
****************************
They are as follows:

A. SessionFactory
The SessionFactory is a factory of session and client of ConnectionProvider. 
It holds second level cache (optional) of data. 
The org.hibernate.SessionFactory interface provides factory method to get the object of Session.

B. Session
The session object provides an interface between the application and data stored in the database. 
It is a short-lived object and wraps the JDBC connection. 
It is factory of Transaction, Query and Criteria. 
It holds a first-level cache (mandatory) of data. 
The org.hibernate.Session interface provides methods to insert, update and delete the object. 
It also provides factory methods for Transaction, Query and Criteria.

C. Transaction
The transaction object specifies the atomic unit of work. 
It is optional. 
The org.hibernate.Transaction interface provides methods for transaction management.

D. ConnectionProvider
It is a factory of JDBC connections. 
It abstracts the application from DriverManager or DataSource. 
It is optional.

E.TransactionFactory
It is a factory of Transaction. 
It is optional.

Maven dependency for Hibernate
*************************

   <dependency>
	<groupId>org.hibernate</groupId>
	<artifactId>hibernate-core</artifactId>
	<version>4.3.10.Final</version>
   </dependency>

   <dependency>
    <groupId>com.oracle</groupId>
    <artifactId>ojdbc14</artifactId>
    <version>14</version>
</dependency>


Hibernate Annotations
**************************
For annotation in Hibernate :

@Entity
@Table
@Id
@Column


Steps for Hibernate code
*****************************

Need to follow the following steps:

a. Create the Persistent class
b. Create the mapping file for Persistent class
c. Create the Configuration file
d. Create the class that retrieves or stores the persistent object
e. Load the jar file
f. Run hibernate application


A simple Persistent class should follow some rules:
********************************
A no-arg constructor
Provide an identifier property
Declare getter and setter methods
Prefer non-final class

For mapping file for Persistent class
**********************************
The mapping file name conventionally, should be class_name.hbm.xml. 
There are many elements of the mapping file.

hibernate-mapping : It is the root element in the mapping file that contains all the mapping elements.
class : It is the sub-element of the hibernate-mapping element. It specifies the Persistent class.
id : It is the subelement of class. It specifies the primary key attribute in the class.
generator : It is the sub-element of id. It is used to generate the primary key. There are many generator classes such as assigned, incrementetc. 
property : It is the sub-element of class that specifies the property name of the Persistent class.

employee.hbm.xml
-------------
<?xml version='1.0' encoding='UTF-8'?>  
<!DOCTYPE hibernate-mapping PUBLIC  
 "-//Hibernate/Hibernate Mapping DTD 5.3//EN"  
 "http://hibernate.sourceforge.net/hibernate-mapping-5.3.dtd">  
  
 <hibernate-mapping>  
  <class name="com.mypackage.Employee" table="emp1000">  
    <id name="id">  
     <generator class="assigned"></generator>  
    </id>  
            
    <property name="firstName"></property>  
    <property name="lastName"></property>  
            
  </class>  
            
 </hibernate-mapping>  

Configuration file
******************
The configuration file contains information about the database and mapping file. 
Conventionally, its name should be hibernate.cfg.xml .

hibernate.cfg.xml
***********************
<?xml version='1.0' encoding='UTF-8'?>  
<!DOCTYPE hibernate-configuration PUBLIC  
          "-//Hibernate/Hibernate Configuration DTD 5.3//EN"  
          "http://hibernate.sourceforge.net/hibernate-configuration-5.3.dtd">  
  
<hibernate-configuration>  
     <session-factory>  
        <property name="hbm2ddl.auto">update</property>  
        <property name="dialect">org.hibernate.dialect.Oracle9Dialect</property>  
        <property name="connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>  
        <property name="connection.username">system</property>  
        <property name="connection.password">jtp</property>  
        <property name="connection.driver_class">oracle.jdbc.driver.OracleDriver</property>  
    <mapping resource="employee.hbm.xml"/>  
   </session-factory>  
</hibernate-configuration>  


Dialect
********
Each SQL vendor has its own set of supported syntax. This is known as the dialect. 
In order to generate appropriate SQL query, Hibernate needs to know, for which DB query needs to be generated. 
Hibernate does it by org.hibernate.dialect.Dialect class and its subclass for each vendor.

Example:
DB2       :   org.hibernate.dialect.DB2Dialect
MySQL  	  :   org.hibernate.dialect.MySQLDialect
Oracle	  :   org.hibernate.dialect.Oracle10gDialect


To save an object in table :
**************************
public boolean addEmp(Emp emp){
	 boolean result=false;
	 try{
		 Session session = new SessionDao().getSession(); 
		 Transaction t=session.beginTransaction();  
		 session.save(emp);
		 t.commit();
		 session.close(); 
		 result=true;
	 }
	catch(Exception e){	System.out.println("Error:"+e);	}
	return result;
 }

To update an object in table :
**********************
public boolean editEmp(Emp emp){
	 boolean result=false;
	 try{
		 Session session = new SessionDao().getSession(); 
		 Transaction t=session.beginTransaction();  
		 session.update(emp);
		 t.commit();
		 session.close(); 
		 result=true;
	 }
	catch(Exception e){	System.out.println("Error:"+e);	}
	return result;
 }

To remove an object in table :
****************
public boolean delEmp(Emp emp){
	 boolean result=false;
	 try{
		 Session session = new SessionDao().getSession(); 
		 Transaction t=session.beginTransaction();  
		 session.delete(emp.getEno());
		 t.commit();
		 session.close(); 
		 result=true;
	 }
	catch(Exception e){	System.out.println("Error:"+e);	}
	return result;
 }


To Search an object from a table :
********************************
	public Employee getEmp(Employee emp) {
		Employee e1 =null;
		try {
			Session session = new SessionModel().getSession();
			e1 = (Employee)session.get(Employee.class, emp.getEno()) ;
		}
		catch(Exception e){	System.out.println("Error:"+e);	}
		return e1;
	}


To handle Date data-type  :
************************
@Temporal(TemporalType.DATE)
private Date bookingdate;


import javax.persistence.Table;
import javax.persistence.Temporal;
import java.util.Date;


Booking booking = new Booking();
booking.setBookingdate(new java.util.Date());


To view all data using  Query :
************************


public List<Emp> searchAll(){
	 List<Emp> emplist =null;
	 Session session = new SessionModel().getSession();
	 Query query = session.createQuery("from Emp"); // uses HQL
	 emplist =query.list();
	 return emplist;
}


--------

List <Emp>    elist = new ServiceDao().searchAll();
for( Emp e : elist) 
    System.out.printf("\n%-20s %-20s %-20s" , e.get.., e.get....,e.get...);
 

































